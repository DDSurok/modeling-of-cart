using System;
using System.Drawing;
using System.Collections.Generic;

namespace Телега.Графические_объекты
{
    class Колесо : Квадрат, Графический_объект
    {
        private Область_построения Родитель;
        public Точка Центр
        {
            get
            {
                return this;
            }
        }
        Точка Ось_поворота;
        /// <summary>
        /// Создает экземпляр колеса
        /// </summary>
        /// <param name="родитель">Панель для доступа к ее высоте панели, поверхности и параметрам поворота</param>
        /// <param name="Размер_колеса">Длина стороны квадрата</param>
        /// <param name="цвет">Цвет колеса</param>
        /// <param name="центр_X">Координаты центра</param>
        /// <param name="центр_Y"></param>
        public Колесо(Область_построения родитель, double Размер_колеса, Color цвет, double центр_X, double центр_Y) : base(родитель, центр_X, центр_Y, Размер_колеса, цвет)
        {
            this.Цвет = цвет;
            this.Родитель = родитель;
            this.Ось_поворота = this.Найти_ось_вращения();
        }
        /// <summary>
        /// Поворачивает квадрат и проверяет, не нужно ли перенести ось вращения
        /// </summary>
        public void Повернуть()
        {
            base.Повернуть(this.Ось_поворота.X, this.Ось_поворота.Y);
            this.Ось_поворота = this.Найти_ось_вращения();
        }
        /// <summary>
        /// Производит поиск самого правого касания колеса с поверхностью
        /// </summary>
        private Точка Найти_ось_вращения()
        {
            List<Точка> list = new List<Точка>();
            foreach (Линия линия in this.Стороны)
            {
                if (линия.Начало.X <= линия.Конец.X)
                    this.Проверка_линии_на_пересечение_с_поверхностью(ref list, линия.Начало.X, линия.Конец.X, линия.Начало.Y, линия.Конец.Y);
                else
                    this.Проверка_линии_на_пересечение_с_поверхностью(ref list, линия.Конец.X, линия.Начало.X, линия.Конец.Y, линия.Начало.Y);
            }
            Точка С_максимальным_значением_X;
            if (list.Count > 0)
                С_максимальным_значением_X = list[0];
            else
                С_максимальным_значением_X = this.Ось_поворота;
            foreach (Точка точка in list)
            {
                if (точка.X > С_максимальным_значением_X.X)
                    С_максимальным_значением_X = точка;
            }
            return С_максимальным_значением_X;
        }
        /// <summary>
        /// Возращает список точек линии, заданной точками (x1, y1) и (x2,y2), лежащих ниже поверхности
        /// </summary>
        /// <param name="list">Возвращаемый список</param>
        private void Проверка_линии_на_пересечение_с_поверхностью(ref List<Точка> list, double x1, double x2, double y1, double y2)
        {
            for (double x = x1; x < x2; x++)
            {
                double y = y1 + (y2 - y1) * (x - x1) / (x2 - x1);
                if (y <= this.Родитель.поверхность.Значение_для_X(x))
                {
                    list.Add(new Точка(this.Родитель, x, y, this.Цвет));
                }
            }
        }
    }
}
